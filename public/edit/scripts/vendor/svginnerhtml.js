// Generated by CoffeeScript 2.5.1
(function() {
  (function(view) {
    var constructors, dummy, innerHTMLPropDesc;
    constructors = ["SVGSVGElement", "SVGGElement", "SVGTextElement"];
    dummy = document.createElement("dummy");
    if (!constructors[0] in view) {
      return false;
    }
    if (Object.defineProperty) {
      innerHTMLPropDesc = {
        get: function() {
          dummy.innerHTML = "";
          Array.prototype.slice.call(this.childNodes).forEach(function(node, index) {
            return dummy.appendChild(node.cloneNode(true));
          });
          return dummy.innerHTML;
        },
        set: function(content) {
          var allNodes, fn, parent, self;
          self = this;
          parent = this;
          allNodes = Array.prototype.slice.call(self.childNodes);
          fn = function(to, node) {
            var newNode;
            if (node.nodeType !== 1 && node.nodeType !== 3) {
              return false;
            }
            if (node.nodeType === 3) {
              newNode = node;
            } else {
              newNode = document.createElementNS("http://www.w3.org/2000/svg", node.nodeName.toLowerCase());
            }
            if (node.attributes) {
              Array.prototype.slice.call(node.attributes).forEach(function(attribute) {
                return newNode.setAttribute(attribute.name, attribute.value);
              });
            }
            if (node.nodeName === "TEXT") {
              newNode.textContent = node.innerHTML;
            }
            to.appendChild(newNode);
            if (node.childNodes && node.childNodes.length) {
              return Array.prototype.slice.call(node.childNodes).forEach(function(node, index) {
                return fn(newNode, node);
              });
            }
          };
          // /> to </tag>
          content = content.replace(/<(\w+)([^<]+?)\/>/, "<$1$2></$1>");
          // Remove existing nodes
          allNodes.forEach(function(node, index) {
            return node.parentNode.removeChild(node);
          });
          dummy.innerHTML = content;
          return Array.prototype.slice.call(dummy.childNodes).forEach(function(node) {
            return fn(self, node);
          });
        },
        enumerable: true,
        configurable: true
      };
      try {
        return constructors.forEach(function(constructor, index) {
          return Object.defineProperty(window[constructor].prototype, "innerHTML", innerHTMLPropDesc);
        });
      } catch (error) {}
    // TODO: Do something meaningful here
    } else if (Object["prototype"].__defineGetter__) {
      return constructors.forEach(function(constructor, index) {
        window[constructor].prototype.__defineSetter__("innerHTML", innerHTMLPropDesc.set);
        return window[constructor].prototype.__defineGetter__("innerHTML", innerHTMLPropDesc.get);
      });
    }
  })(window);

}).call(this);
