// Generated by CoffeeScript 2.5.1
(function() {
  define(['cmx/drawable'], function(Drawable) {
    var Gizmo, initialUndoValue, undoEval;
    // cached values between controlUndoOpen - controlUndoClose
    initialUndoValue = void 0;
    undoEval = void 0;
    return Gizmo = (function() {
      class Gizmo extends Drawable {
        constructor(entity, root) {
          var superArg;
          superArg = function() {
            return this.entity.scene;
          };
          super(superArg);
          this.entity = entity;
          this.entity.gizmo = this;
          this.leafGizmo = this.build(root);
        }

        build(root) {
          return this.ΔrootGizmo = root.append("g").attr("class", "cmx-gizmo root");
        }

        controlDragStart(bone) {
          $(this.scene.rootElement).addClass("cmx-something-is-being-dragged");
          this.entity.highlightBones(this.ΔskeletonGizmo, this.entity.skelet.affectedBones(bone.name));
          return $("html").addClass("cmx-force-move-cursor");
        }

        controlDragEnd(bone) {
          $(this.scene.rootElement).removeClass("cmx-something-is-being-dragged");
          this.entity.unhighlightBones(this.ΔskeletonGizmo);
          return $("html").removeClass("cmx-force-move-cursor");
        }

        controlUndoOpen(what, ...params) {
          var getter, setter;
          getter = "get" + _.str.classify(what);
          setter = "set" + _.str.classify(what);
          undoEval = (val) => {
            if (val) {
              return this.entity[setter].call(this.entity, val);
            } else {
              return this.entity[getter].apply(this.entity, params);
            }
          };
          return initialUndoValue = undoEval();
        }

        controlUndoClose() {
          var finalUndoValue;
          finalUndoValue = undoEval();
          return ((original, modified, evaluator) => {
            var action;
            action = () => {
              evaluator(original);
              this.entity.throttledUpdate();
              return this.scene.cmx.registerRedo(() => {
                evaluator(modified);
                this.entity.throttledUpdate();
                return this.scene.cmx.registerUndo(action);
              });
            };
            return this.scene.cmx.registerUndo(action);
          })(initialUndoValue, finalUndoValue, undoEval);
        }

        unselect() {
          this.ΔentityGizmo.classed("cmx-selected", false);
          return this.ΔentityGizmo.select(".cmx-force-unselected").classed("cmx-force-unselected", false);
        }

        select() {
          this.scene.cmx.unselectAll();
          this.ΔentityGizmo.classed("cmx-selected", true);
          this.ΔentityGizmo.select(".root").classed("cmx-force-unselected", true);
          $(this.scene.rootElement).addClass("cmx-has-selected-gizmo");
          $("html").addClass("cmx-active-selection");
          return this.scene.cmx.previousSelection = this;
        }

      };

      Gizmo.prototype.CONTROL_POINT_RADIUS = 3;

      return Gizmo;

    }).call(this);
  });

}).call(this);
