// Generated by CoffeeScript 2.5.1
(function() {
  var indexOf = [].indexOf;

  define(['cmx/drawable', 'cmx/gizmos/entity_gizmo', 'cmx/skelet'], function(Drawable, EntityGizmo, Skelet) {
    var Entity;
    return Entity = class Entity extends Drawable {
      constructor(scene) {
        super(scene);
        this.skelet = new Skelet();
      }

      setFrame(t) {
        this.t = t;
      }

      getFrame() {
        var re;
        // strip defaults and make the transformation human-readable
        re = /\)([^ ])/;
        return _.str.trim(this.t.replace("translate(0,0)", "").replace("rotate(0)", "").replace("skewX(0)", "").replace("scale(1,1)", "").replace(re, ") $1"));
      }

      getEffectiveFrame() {
        var boneFrame, frame;
        frame = [];
        boneFrame = this.getAttachBoneFrame();
        if (boneFrame) {
          frame.push(boneFrame);
        }
        frame.push(this.t);
        return frame.join("");
      }

      getAttachBoneFrame() {
        var attachBone;
        if (this.attachBone && this.parentView.skelet) {
          attachBone = this.parentView.skelet.bone(this.attachBone);
        }
        return this.prepareFrame(attachBone);
      }

      openLayer(layer) {
        return this.openFrame((() => {
          return this.getEffectiveFrame();
        }), {
          "class": `cmx-entity cmx-${this.constructor.name.toLowerCase()}`,
          "data": {
            "entity": this
          }
        });
      }

      drawLayer(layer) {}

      // nothing to do here
      closeLayer(layer) {
        return this.closeFrame();
      }

      setAttachBone(boneName) {
        return this.attachBone = boneName.toUpperCase();
      }

      buildGizmo(root) {
        return this.gizmo = new EntityGizmo(this, root);
      }

      highlightBones(root, bones = []) {
        if (!root) {
          return;
        }
        return root.selectAll(".cmx-control").each(function(d, bone) {
          var ref;
          if (ref = d.name, indexOf.call(bones, ref) >= 0) {
            return d3.select(this).classed("cmx-highlighted-bone", true);
          }
        });
      }

      unhighlightBones(root) {
        if (!root) {
          return;
        }
        return root.selectAll(".cmx-highlighted-bone").each(function(d, bone) {
          return d3.select(this).classed("cmx-highlighted-bone", false);
        });
      }

    };
  });

}).call(this);
