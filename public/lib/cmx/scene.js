// Generated by CoffeeScript 2.5.1
(function() {
  define(['cmx/drawable', 'cmx/renderer', 'cmx/overlay', 'cmx/gizmo'], function(Drawable, Renderer, Overlay, Gizmo) {
    var Scene;
    return Scene = (function() {
      class Scene extends Drawable {
        constructor(cmx, rootElement, width = 300, height = 400, frame1 = true, marginX = 20, marginY = 20) {
          super(this);
          this.cmx = cmx;
          this.rootElement = rootElement;
          this.width = width;
          this.height = height;
          this.frame = frame1;
          this.marginX = marginX;
          this.marginY = marginY;
          this.renderer = new Renderer(this.rootElement, this.width, this.height, this.marginX, this.marginY);
          this;
        }

        drawScene() {
          var i, layerId, layers, ref, results, view, Δentity, Δg, Δlayer;
          this.renderer.Δlayers.selectAll("g").remove();
          layers = [d3.select(document.createElementNS(d3.ns.prefix.svg, "g")).attr("class", "cmx-layer cmx-layer-0"), d3.select(document.createElementNS(d3.ns.prefix.svg, "g")).attr("class", "cmx-layer cmx-layer-1"), d3.select(document.createElementNS(d3.ns.prefix.svg, "g")).attr("class", "cmx-layer cmx-layer-2")]; // from top to bottom // special non-zoomable layer, goes on top of frame
          results = [];
          for (layerId = i = ref = layers.length - 1; (ref <= 0 ? i <= 0 : i >= 0); layerId = ref <= 0 ? ++i : --i) {
            if (layerId === 0 && this.frame) {
              Δg = d3.select(document.createElementNS(d3.ns.prefix.svg, "g"));
              Δg.attr("class", "cmx-layer cmx-layer-frame");
              Δlayer = Δg.append("g");
              Δlayer.attr("class", "cmx-pseudo-entity cmx-frame");
              this.renderer.Δlayers.node().appendChild(Δlayer.node().parentNode);
              this.drawFrame(Δlayer);
            }
            Δlayer = layers[layerId];
            this.renderer.Δlayers.node().appendChild(Δlayer.node());
            results.push((function() {
              var j, len, ref1, results1;
              ref1 = this.subviews;
              results1 = [];
              for (j = 0, len = ref1.length; j < len; j++) {
                view = ref1[j];
                Δentity = d3.select(document.createElementNS(d3.ns.prefix.svg, "g")).attr("class", "cmx-entity-tree");
                Δlayer.node().appendChild(Δentity.node());
                view.draw(layerId);
                results1.push(this.renderer.draw(Δentity));
              }
              return results1;
            }).call(this));
          }
          return results;
        }

        triggerUpdateEvent() {
          return $(this.rootElement).trigger("cmx:updated");
        }

        buildGizmos() {
          this.overlay = new Overlay(this.rootElement, this.width, this.height, this.marginX, this.marginY);
          super.buildGizmos(this.overlay.Δgizmos);
          return this.renderer.Δlayers.selectAll(".cmx-entity").on("click", function(event) {
            var gizmo, ref, ref1;
            gizmo = (ref = this.cmx) != null ? (ref1 = ref.entity) != null ? ref1.gizmo : void 0 : void 0;
            if (gizmo) {
              gizmo.select();
              return d3.event.stopPropagation();
            }
          });
        }

        drawFrame(Δwhere) {
          var frame, thickness;
          thickness = 0;
          frame = [[thickness, thickness], [this.width - thickness, thickness], [this.width - thickness, this.height - thickness], [thickness, this.height - thickness], [thickness, thickness]];
          this.renderer.line(frame);
          return this.renderer.draw(Δwhere);
        }

      };

      Scene.prototype.announceUpdate = _.throttle(Scene.prototype.triggerUpdateEvent, 2000);

      return Scene;

    }).call(this);
  });

}).call(this);
