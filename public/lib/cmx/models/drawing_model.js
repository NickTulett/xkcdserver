// Generated by CoffeeScript 2.5.1
(function() {
  define(['cmx/model', 'cmx/entities/drawing'], function(Model, Drawing) {
    var DEFAULT_LAYER, DrawingModel;
    DEFAULT_LAYER = 2;
    return DrawingModel = class DrawingModel extends Model {
      constructor() {
        super();
        this.defaults = {
          "t": "",
          "pose": "0,0",
          "drawlist": [[], "array"]
        };
        super();
      }

      applyDefaults(props) {
        var $parser, list;
        super.applyDefaults();
        // this is our mini-parser for drawing's content
        if (props["content"]) {
          list = [];
          $parser = $("<div/>").html(props["content"]);
          $parser.children().each(function() {
            var $command, action, cmd, collectOpts, layer, points;
            $command = $(this);
            collectOpts = function($el) {
              var attr, i, key, len, ref, res, val;
              res = {};
              ref = $el.get(0).attributes;
              for (i = 0, len = ref.length; i < len; i++) {
                attr = ref[i];
                key = attr.name.toLowerCase();
                val = attr.value;
                res[key] = val;
              }
              return res;
            };
            layer = parseInt($command.attr("layer") || DEFAULT_LAYER, 10);
            action = $command.prop('tagName').toLowerCase();
            cmd = [layer, action];
            switch (action) {
              case 'line':
                points = [];
                $command.find("point").each(function() {
                  var $point, x, y;
                  $point = $(this);
                  x = parseInt($point.attr("x") || 0, 10);
                  y = parseInt($point.attr("y") || 0, 10);
                  return points.push([x, y]);
                });
                cmd.push(points);
            }
            cmd.push(collectOpts($command));
            return list.push(cmd);
          });
          props["drawlist"] = list;
        }
        return props;
      }

      materialize(parent) {
        var o;
        o = new Drawing(parent.scene, this.props["drawlist"]);
        o.setFrame(this.props["t"]);
        o.setPose(this.unserializePose(this.props["pose"]));
        parent.add(o);
        return super.materialize(o);
      }

      read() {
        this.props["t"] = this.view.getFrame();
        return this.props["pose"] = this.serializePose(this.view.getPose());
      }

    };
  });

}).call(this);
