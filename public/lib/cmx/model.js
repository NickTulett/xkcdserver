// Generated by CoffeeScript 2.5.1
(function() {
  define(function() {
    var Model;
    return Model = class Model {
      constructor(cmx) {
        this.cmx = cmx;
        this.children = [];
        this.props = typeof this.applyDefaults === "function" ? this.applyDefaults({}) : void 0;
        this.mutableProps = [
          "t",
          "pose" // props editable via Gizmo UI
        ];
      }

      set(props) {
        // apply defaults
        props = typeof this.applyDefaults === "function" ? this.applyDefaults(props) : void 0;
        // filter unknown properties
        props = _.pick(props, _.keys(this.defaults));
        // coerce possible string values to known types
        props = typeof this.coerceTypes === "function" ? this.coerceTypes(props) : void 0;
        // apply to self
        return _.extend(this.props, props);
      }

      // TODO: notification event triggering here?
      unserializePose(poseString) {
        var items;
        items = poseString.split("|");
        return items.map(function(pair) {
          return pair.split(",").map(function(numString) {
            return parseFloat(numString);
          });
        });
      }

      serializePose(pose) {
        var pairs;
        pairs = pose.map(function(pair) {
          return pair.join(",");
        });
        return pairs.join("|");
      }

      computeDefaults() {
        var defaults, key, ref, val;
        defaults = {};
        ref = this.defaults;
        for (key in ref) {
          val = ref[key];
          if (_.isArray(val)) {
            val = val[0];
          }
          defaults[key] = val;
        }
        return defaults;
      }

      applyDefaults(props) {
        var defaults;
        defaults = this.computeDefaults();
        _.defaults(props, defaults);
        return props;
      }

      coerceTypes(props) {
        var def, key, res, type, val;
        res = {};
        for (key in props) {
          val = props[key];
          def = this.defaults[key];
          if (def === void 0) {
            continue;
          }
          type = def[1] || "string";
          res[key] = (function() {
            switch (type) {
              case "s":
              case "string":
                return "" + val;
              case "i":
              case "int":
                return parseInt(val, 10) || 0;
              case "f":
              case "float":
                return parseFloat(val) || 0.0;
              case "a":
              case "array":
                return val; // TODO: validate array structure
              case "b":
              case "bool":
                if (_.isString(val)) {
                  return val.match(/^(true|1|yes)$/i) !== null;
                } else {
                  return !!val;
                }
                break;
              default:
                return val;
            }
          })();
        }
        return res;
      }

      read() {}

      writeProps(props, $source) {
        var defaults, prop, ref, results, val;
        defaults = this.computeDefaults();
        ref = _.pick(props, this.mutableProps);
        results = [];
        for (prop in ref) {
          val = ref[prop];
          if (val === defaults[prop]) {
            results.push($source.removeAttr(prop));
          } else {
            results.push($source.attr(prop, val));
          }
        }
        return results;
      }

      serialize() {
        var child, i, len, ref;
        this.read();
        this.writeProps(this.props, $(this.source));
        ref = this.children;
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          child.serialize();
        }
        return this;
      }

      materialize(newborn) {
        var child, i, len, ref;
        ref = this.children;
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          child.materialize(newborn);
        }
        return this.view = newborn;
      }

      debugReport(indent = 0, logger = console) {
        var child, displayableProps, i, indenting, len, ref, results;
        indenting = (function() {
          var results = [];
          for (var i = 0; 0 <= indent ? i < indent : i > indent; 0 <= indent ? i++ : i--){ results.push(i); }
          return results;
        }).apply(this).map(function() {
          return " ";
        }).join("");
        displayableProps = _.clone(this.props);
        if (_.isString(displayableProps["content"]) && displayableProps["content"].indexOf("\n") !== -1) {
          // collapse content if it is a multi-line string
          displayableProps["content"] = "...";
        }
        logger.log(`${indenting}${this.constructor.name}`, displayableProps);
        ref = this.children;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          results.push(child.debugReport(indent + 2, logger));
        }
        return results;
      }

    };
  });

}).call(this);
