// Generated by CoffeeScript 2.5.1
(function() {
  define(['cmx/gizmos/entity_gizmo'], function(EntityGizmo) {
    var DrawingGizmo;
    return DrawingGizmo = class DrawingGizmo extends EntityGizmo {
      update() {
        var ref;
        super.update();
        return (ref = this.ΔskeletonGizmo) != null ? ref.selectAll(".cmx-control").attr("cx", function(bone) {
          return bone.x;
        }).attr("cy", function(bone) {
          return bone.y;
        }).style("display", (bone) => {}) : void 0;
      }

      build() {
        var base, data, doubleClick, drag, resetBone;
        base = super.build();
        this.ΔskeletonGizmo = base.append("g").attr("class", "cmx-gizmo cmx-drawing");
        resetBone = (bone) => {
          this.entity.skelet.moveBone(bone.name, 0, 0, true);
          return this.entity.throttledUpdate();
        };
        doubleClick = (bone) => {
          d3.event.preventDefault();
          if (bone.name === 'HNDL') {
            return resetBone(bone);
          }
        };
        drag = d3.behavior.drag().on("dragstart", (bone) => {
          this.controlUndoOpen("pose");
          return this.controlDragStart(bone);
        }).on("dragend", (bone) => {
          this.controlDragEnd(bone);
          return this.controlUndoClose();
        }).on("drag", (bone) => {
          this.entity.skelet.moveBone(bone.name, d3.event.dx, d3.event.dy, false);
          return this.entity.throttledUpdate();
        });
        data = this.entity.skelet.bonesWithIndices(this.entity.drawingBones);
        this.ΔskeletonGizmo.selectAll(".cmx-control").data(data).enter().append("circle").attr("class", function(bone) {
          return `cmx-control cmx-${bone.type}`;
        }).attr("r", this.CONTROL_POINT_RADIUS).on("dblclick", doubleClick).call(drag);
        return this.ΔskeletonGizmo;
      }

    };
  });

}).call(this);
